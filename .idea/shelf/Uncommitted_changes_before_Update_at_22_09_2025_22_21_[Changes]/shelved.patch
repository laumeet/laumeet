Index: backend/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, request, jsonify\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom sqlalchemy import Integer, String, Boolean, DateTime, ForeignKey\r\nfrom sqlalchemy.orm import mapped_column, Mapped, relationship\r\nfrom werkzeug.security import generate_password_hash, check_password_hash\r\nfrom flask_jwt_extended import (\r\n    JWTManager, create_access_token, create_refresh_token,\r\n    jwt_required, get_jwt_identity, get_jwt,\r\n    set_access_cookies, set_refresh_cookies, unset_jwt_cookies\r\n)\r\nfrom datetime import datetime, timedelta, timezone\r\nimport re\r\nimport uuid\r\nimport base64\r\nfrom functools import wraps\r\nfrom flask_cors import CORS\r\nimport time\r\n\r\napp = Flask(__name__)\r\nCORS(app)\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///lausers.db'\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\napp.config['JWT_SECRET_KEY'] = 'your-secret-key-change-this-in-production'  # Change this!\r\napp.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=24)\r\napp.config['JWT_REFRESH_TOKEN_EXPIRES'] = timedelta(days=14)  # 14-day refresh tokens\r\napp.config['JWT_TOKEN_LOCATION'] = ['cookies', 'headers']\r\napp.config['JWT_COOKIE_SECURE'] = False  # Set to True in production with HTTPS\r\napp.config['JWT_COOKIE_CSRF_PROTECT'] = False\r\n\r\ndb = SQLAlchemy(app)\r\njwt = JWTManager(app)\r\n\r\n# Rate limiting storage\r\nreset_attempts = {}\r\n\r\n\r\ndef rate_limit(max_attempts=5, window_seconds=300):\r\n    def decorator(f):\r\n        @wraps(f)\r\n        def decorated_function(*args, **kwargs):\r\n            ip = request.remote_addr\r\n            username = request.json.get('username') if request.json else None\r\n            key = f\"{ip}:{username}\" if username else ip\r\n            now = time.time()\r\n            reset_attempts[key] = [t for t in reset_attempts.get(key, []) if now - t < window_seconds]\r\n            if len(reset_attempts.get(key, [])) >= max_attempts:\r\n                return jsonify({\r\n                    \"success\": False,\r\n                    \"message\": f\"Too many attempts. Please try again in {window_seconds // 60} minutes.\"\r\n                }), 429\r\n            reset_attempts.setdefault(key, []).append(now)\r\n            return f(*args, **kwargs)\r\n\r\n        return decorated_function\r\n\r\n    return decorator\r\n\r\n\r\n# Picture model\r\nclass Picture(db.Model):\r\n    __tablename__ = \"pictures\"\r\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\r\n    user_id: Mapped[int] = mapped_column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)\r\n    image: Mapped[str] = mapped_column(String(500), nullable=False)\r\n    user = relationship(\"User\", back_populates=\"pictures\")\r\n\r\n\r\nclass User(db.Model):\r\n    __tablename__ = \"users\"\r\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\r\n    public_id: Mapped[str] = mapped_column(String(36), unique=True, default=lambda: str(uuid.uuid4()))\r\n    username: Mapped[str] = mapped_column(String(50), unique=True, nullable=False)\r\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\r\n    security_question: Mapped[str] = mapped_column(String(255), nullable=False)\r\n    security_answer: Mapped[str] = mapped_column(String(255), nullable=False)\r\n    name: Mapped[str] = mapped_column(String(100), nullable=True)\r\n    age: Mapped[int] = mapped_column(Integer, nullable=False)\r\n    department: Mapped[str] = mapped_column(String(100), nullable=True)\r\n    gender: Mapped[str] = mapped_column(String(20), nullable=False)\r\n    genotype: Mapped[str] = mapped_column(String(5), nullable=True)\r\n    level: Mapped[str] = mapped_column(String(20), nullable=True)\r\n    interested_in: Mapped[str] = mapped_column(String(50), nullable=True)\r\n    religious: Mapped[str] = mapped_column(String(50), nullable=True)\r\n    is_anonymous: Mapped[bool] = mapped_column(Boolean, default=False)\r\n    category: Mapped[str] = mapped_column(String(50), nullable=False)\r\n    bio: Mapped[str] = mapped_column(String(500), nullable=True)\r\n    timestamp: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)\r\n    last_password_reset: Mapped[datetime] = mapped_column(DateTime, nullable=True)\r\n\r\n    pictures = relationship(\"Picture\", back_populates=\"user\", cascade=\"all, delete-orphan\", passive_deletes=True)\r\n\r\n    def set_password(self, password: str):\r\n        self.password = generate_password_hash(password)\r\n\r\n    def check_password(self, password: str) -> bool:\r\n        return check_password_hash(self.password, password)\r\n\r\n    def set_security_answer(self, answer: str):\r\n        self.security_answer = generate_password_hash(answer.lower().strip())\r\n\r\n    def check_security_answer(self, answer: str) -> bool:\r\n        return check_password_hash(self.security_answer, answer.lower().strip())\r\n\r\n    def to_dict(self, include_security=False):\r\n        data = {\r\n            \"id\": self.public_id,\r\n            \"username\": self.username,\r\n            \"name\": self.name,\r\n            \"age\": str(self.age),\r\n            \"gender\": self.gender,\r\n            \"department\": self.department,\r\n            \"genotype\": self.genotype,\r\n            \"level\": self.level,\r\n            \"interestedIn\": self.interested_in,\r\n            \"religious\": self.religious,\r\n            \"isAnonymous\": self.is_anonymous,\r\n            \"category\": self.category,\r\n            \"bio\": self.bio,\r\n            \"pictures\": [picture.image for picture in self.pictures],\r\n            \"timestamp\": self.timestamp.isoformat() + \"Z\" if self.timestamp else None\r\n        }\r\n        if include_security:\r\n            data[\"security_question\"] = self.security_question\r\n        return data\r\n\r\n    def __repr__(self):\r\n        return f\"<User {self.username}>\"\r\n\r\n\r\nclass TokenBlocklist(db.Model):\r\n    __tablename__ = \"token_blacklist\"\r\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\r\n    jti: Mapped[str] = mapped_column(String(36), nullable=False, index=True)\r\n    token_type: Mapped[str] = mapped_column(String(10), nullable=False)\r\n    user_id: Mapped[int] = mapped_column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)\r\n    revoked_at: Mapped[datetime] = mapped_column(DateTime, nullable=False)\r\n    expires: Mapped[datetime] = mapped_column(DateTime, nullable=False)\r\n    user = db.relationship('User', lazy='joined')\r\n\r\n\r\nCOMMON_SECURITY_QUESTIONS = [\r\n    \"What was the name of your first pet?\",\r\n    \"What city were you born in?\",\r\n    \"What is your mother's maiden name?\",\r\n    \"What was the name of your elementary school?\",\r\n    \"What was your childhood nickname?\",\r\n    \"What is the name of your favorite childhood friend?\",\r\n    \"What street did you grow up on?\",\r\n    \"What was the make of your first car?\",\r\n    \"What is your favorite movie?\",\r\n    \"What is your favorite book?\"\r\n]\r\n\r\n\r\ndef is_valid_username(username):\r\n    return bool(username) and 3 <= len(username) <= 50 and re.match(r'^[a-zA-Z0-9_]+$', username)\r\n\r\n\r\ndef is_strong_password(password):\r\n    if not password or len(password) < 8:\r\n        return False\r\n    return any(c.isdigit() for c in password) and any(c.isupper() for c in password)\r\n\r\n\r\ndef validate_gender(gender):\r\n    return bool(gender) and gender.lower() in [\"male\", \"female\", \"other\"]\r\n\r\n\r\ndef is_valid_image_data(image_data, max_size_kb=500):\r\n    if image_data.startswith(('http://', 'https://')):\r\n        return True, \"url\"\r\n    if image_data.startswith('data:image/'):\r\n        try:\r\n            header, data = image_data.split(',', 1)\r\n            base64.b64decode(data)\r\n            size_kb = len(data) * 3 / 4 / 1024\r\n            if size_kb > max_size_kb:\r\n                return False, f\"Image size exceeds {max_size_kb}KB limit\"\r\n            return True, \"base64\"\r\n        except Exception:\r\n            return False, \"Invalid base64 image data\"\r\n    return False, \"Image must be a valid URL or base64 data URI\"\r\n\r\n\r\n@jwt.token_in_blocklist_loader\r\ndef check_if_token_revoked(jwt_header, jwt_payload):\r\n    jti = jwt_payload[\"jti\"]\r\n    return TokenBlocklist.query.filter_by(jti=jti).first() is not None\r\n\r\n\r\n@jwt.user_identity_loader\r\ndef user_identity_lookup(user):\r\n    return user.public_id if isinstance(user, User) else user\r\n\r\n\r\n@jwt.user_lookup_loader\r\ndef user_lookup_callback(_jwt_header, jwt_data):\r\n    return User.query.filter_by(public_id=jwt_data[\"sub\"]).first()\r\n\r\n\r\nwith app.app_context():\r\n    db.create_all()\r\n\r\n\r\n@app.route(\"/\")\r\ndef home():\r\n    return jsonify({\"message\": \"Dating App API\"})\r\n\r\n\r\n@app.route(\"/security-questions\", methods=[\"GET\"])\r\ndef get_security_questions():\r\n    return jsonify({\"success\": True, \"questions\": COMMON_SECURITY_QUESTIONS})\r\n\r\n\r\n@app.route(\"/signup\", methods=[\"POST\"])\r\ndef signup():\r\n    data = request.json or {}\r\n    username = data.get(\"username\")\r\n    password = data.get(\"password\")\r\n    security_question = data.get(\"security_question\")\r\n    security_answer = data.get(\"security_answer\")\r\n    name = data.get(\"name\")  # <-- added\r\n    age = data.get(\"age\")\r\n    department = data.get(\"department\")\r\n    gender = data.get(\"gender\")\r\n    genotype = data.get(\"genotype\")\r\n    level = data.get(\"level\")\r\n    interested_in = data.get(\"interestedIn\")  # camelCase input â†’ snake_case db\r\n    religious = data.get(\"religious\")\r\n    is_anonymous = data.get(\"isAnonymous\", False)\r\n    category = data.get(\"category\", \"friend\")\r\n    bio = data.get(\"bio\")\r\n    pictures = data.get(\"pictures\", [])\r\n\r\n    # Required fields\r\n    if not username or not password:\r\n        return jsonify({\"success\": False, \"message\": \"Username and password are required\"}), 400\r\n    if not security_question or len(security_question.strip()) < 5:\r\n        return jsonify({\"success\": False, \"message\": \"Security question must be at least 5 characters long\"}), 400\r\n    if not security_answer or len(security_answer.strip()) < 2:\r\n        return jsonify({\"success\": False, \"message\": \"Security answer must be at least 2 characters long\"}), 400\r\n    if not is_valid_username(username):\r\n        return jsonify({\"success\": False, \"message\": \"Invalid username format\"}), 400\r\n    if not is_strong_password(password):\r\n        return jsonify({\"success\": False, \"message\": \"Weak password\"}), 400\r\n\r\n    try:\r\n        age = int(age)\r\n        if age < 18 or age > 100:\r\n            return jsonify({\"success\": False, \"message\": \"Age must be between 18 and 100\"}), 400\r\n    except (ValueError, TypeError):\r\n        return jsonify({\"success\": False, \"message\": \"Age must be a valid number\"}), 400\r\n\r\n    if not validate_gender(gender):\r\n        return jsonify({\"success\": False, \"message\": \"Gender must be male, female, or other\"}), 400\r\n    if not isinstance(is_anonymous, bool):\r\n        return jsonify({\"success\": False, \"message\": \"isAnonymous must be boolean\"}), 400\r\n    if not category:\r\n        return jsonify({\"success\": False, \"message\": \"Category is required\"}), 400\r\n    if len(pictures) > 10:\r\n        return jsonify({\"success\": False, \"message\": \"Max 10 pictures allowed\"}), 400\r\n\r\n    for img in pictures:\r\n        valid, msg = is_valid_image_data(img)\r\n        if not valid:\r\n            return jsonify({\"success\": False, \"message\": f\"Invalid image: {msg}\"}), 400\r\n\r\n    if User.query.filter_by(username=username).first():\r\n        return jsonify({\"success\": False, \"message\": \"Username already taken\"}), 400\r\n\r\n    # Create new user\r\n    new_user = User(\r\n        username=username,\r\n        security_question=security_question.strip(),\r\n        age=age,\r\n        department=department or \"\",   # safe default\r\n        gender=gender.lower(),\r\n        genotype=genotype or \"\",\r\n        level=level or \"\",\r\n        interested_in=interested_in or \"\",\r\n        religious=religious or \"\",\r\n        is_anonymous=is_anonymous,\r\n        category=category,\r\n        bio=bio or \"\",\r\n        name=name or \"\"   # optional but avoids None crash\r\n    )\r\n    new_user.set_password(password)\r\n    new_user.set_security_answer(security_answer)\r\n\r\n    for img in pictures:\r\n        db.session.add(Picture(user=new_user, image=img))\r\n\r\n    db.session.add(new_user)\r\n    db.session.commit()\r\n\r\n    access_token = create_access_token(identity=new_user)\r\n    refresh_token = create_refresh_token(identity=new_user)\r\n\r\n    response = jsonify({\r\n        \"success\": True,\r\n        \"message\": \"User created successfully\",\r\n        \"user\": new_user.to_dict(),\r\n        \"access_token\": access_token,\r\n        \"refresh_token\": refresh_token\r\n    })\r\n    set_access_cookies(response, access_token)\r\n    set_refresh_cookies(response, refresh_token)\r\n    return response, 201\r\n\r\n\r\n@app.route(\"/login\", methods=[\"POST\"])\r\ndef login():\r\n    data = request.json or {}\r\n    username = data.get(\"username\")\r\n    password = data.get(\"password\")\r\n    if not username or not password:\r\n        return jsonify({\"success\": False, \"message\": \"Username and password required\"}), 400\r\n    user = User.query.filter_by(username=username).first()\r\n    if not user or not user.check_password(password):\r\n        return jsonify({\"success\": False, \"message\": \"Invalid username or password\"}), 401\r\n\r\n    access_token = create_access_token(identity=user)\r\n    refresh_token = create_refresh_token(identity=user)\r\n    response = jsonify({\r\n        \"success\": True,\r\n        \"message\": \"Login successful\",\r\n        \"user\": user.to_dict(),\r\n        \"access_token\": access_token,\r\n        \"refresh_token\": refresh_token\r\n    })\r\n    set_access_cookies(response, access_token)\r\n    set_refresh_cookies(response, refresh_token)\r\n    return response, 200\r\n\r\n\r\n@app.route(\"/protected\")\r\n@jwt_required()\r\ndef protected():\r\n    public_id = get_jwt_identity()\r\n    user = User.query.filter_by(public_id=public_id).first()\r\n    if not user:\r\n        return jsonify({\"success\": False, \"message\": \"User not found\"}), 404\r\n    return jsonify({\"success\": True, \"user\": user.to_dict()})\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    with app.app_context():\r\n        db.create_all()\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/main.py b/backend/main.py
--- a/backend/main.py	(revision e326b0227d44d4766ebf008551c9794605cce618)
+++ b/backend/main.py	(date 1758576054359)
@@ -6,7 +6,8 @@
 from flask_jwt_extended import (
     JWTManager, create_access_token, create_refresh_token,
     jwt_required, get_jwt_identity, get_jwt,
-    set_access_cookies, set_refresh_cookies, unset_jwt_cookies
+    set_access_cookies, set_refresh_cookies, unset_jwt_cookies,
+    verify_jwt_in_request, get_jwt_identity
 )
 from datetime import datetime, timedelta, timezone
 import re
@@ -31,7 +32,7 @@
 jwt = JWTManager(app)
 
 # Rate limiting storage
-reset_attempts = {}
+reset_attempts = {} #A Python dictionary used to store request timestamps.
 
 
 def rate_limit(max_attempts=5, window_seconds=300):
@@ -214,6 +215,13 @@
 
 @app.route("/signup", methods=["POST"])
 def signup():
+    # Check if already logged in
+    verify_jwt_in_request(optional=True)
+    current_user = get_jwt_identity()
+    if current_user:
+        return jsonify(
+            {"success": False, "message": "Youâ€™re already logged in. Please log out to register a new account."}), 403
+
     data = request.json or {}
     username = data.get("username")
     password = data.get("password")
@@ -346,4 +354,4 @@
 if __name__ == "__main__":
     with app.app_context():
         db.create_all()
-    app.run(debug=True)
+    app.run(debug=True)
\ No newline at end of file
